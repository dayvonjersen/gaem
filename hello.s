.export _foo
_foo:
.incbin "yychr.chr"
;
; File generated by cc65 v 2.15 - Git 51bcf28
;
	.fopt		compiler,"cc65 v 2.15 - Git 51bcf28"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_waitvblank
	.import		_clrscr
	.import		_gotoxy
	.import		_cputc
	.import		_cputs
	.import		_cprintf
	.import		_textcolor
	.import		_bgcolor
	.import		_screensize
	.export		_read_joystick1
	.export		_delay
	.export		_game_over
	.export		_faec
	.export		_memefaec
	
	.export		_main

.segment	"RODATA"

_faec:
	.word	$0007
	.word	$000A
	.word	$0007
	.word	$0012
	.word	$000C
	.word	$000E
	.word	$0010
	.word	$000E
	.word	$0013
	.word	$0012
	.word	$0015
	.word	$0011
	.word	$0016
	.word	$0010
	.word	$0017
	.word	$000D
	.word	$0017
	.word	$000E
	.word	$0017
	.word	$000F
	.word	$0013
	.word	$000A
	.word	$0015
	.word	$000B
	.word	$0016
	.word	$000C
	.res	4,$00
L00E4:
	.byte	$78,$3D,$25,$75,$20,$79,$3D,$25,$75,$00
L00EC:
	.byte	$3A,$5E,$29,$00
L008E	:=	L00EC+0
L00AE	:=	L00E4+7

; ---------------------------------------------------------------
; unsigned char __near__ read_joystick1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_joystick1: near

.segment	"CODE"

;
; unsigned char n = 8, joy_state = 0;
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     pusha
;
; write_addr(0x4016, 1);
;
	ldx     #$00
	lda     #$01
	sta     $4016
;
; write_addr(0x4016, 0);
;
	ldx     #$00
	lda     #$00
	sta     $4016
;
; while(n) {
;
	jmp     L000D
;
; joy_state = (joy_state << 1) | read_addr(0x4016) & 1;
;
L000B:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$00
	lda     $4016
	ldx     #$00
	and     #$01
	jsr     tosorax
	ldx     #$00
	ldy     #$00
	sta     (sp),y
;
; n--;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	pha
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	pla
;
; while(n) {
;
L000D:	ldy     #$01
	lda     (sp),y
	jne     L000B
;
; return joy_state;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L0002
;
; }
;
L0002:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ delay (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"CODE"

;
; void delay(int i) {
;
	jsr     pushax
;
; while(i--) waitvblank();
;
	jmp     L0018
L0016:	jsr     _waitvblank
L0018:	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	stx     tmp1
	ora     tmp1
	jne     L0016
;
; }
;
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_over: near

.segment	"RODATA"

L001E:
	.byte	$20,$74,$68,$69,$73,$20,$77,$61,$73,$20,$61,$20,$74,$72,$69,$75
	.byte	$6D,$70,$68,$00,$00
	.res	12,$00
	.byte	$20,$69,$27,$6D,$20,$6D,$61,$6B,$69,$6E,$67,$20,$61,$20,$6E,$6F
	.byte	$74,$65,$20,$68,$65,$72,$65,$00,$00
	.res	8,$00
	.byte	$20,$48,$55,$47,$45,$20,$53,$55,$43,$43,$45,$53,$53,$00,$00
	.res	18,$00
	.byte	$69,$74,$27,$73,$20,$68,$61,$72,$64,$20,$74,$6F,$20,$6F,$76,$65
	.byte	$72,$73,$74,$61,$74,$65,$20,$6D,$79,$20,$73,$61,$74,$69,$73,$2D
	.byte	$00

.segment	"CODE"

;
; "it's hard to overstate my satis-\0"}; 
;
	ldy     #$84
	jsr     subysp
	ldy     #$00
L0022:	lda     L001E,y
	sta     (sp),y
	iny
	cpy     #$84
	bne     L0022
;
; screensize(&x,&y);
;
	jsr     decsp7
	lda     #$01
	jsr     leaa0sp
	jsr     pushax
	lda     #$02
	jsr     leaa0sp
	jsr     _screensize
;
; clrscr();
;
	jsr     _clrscr
;
; bgcolor(COLOR_CYAN);
;
	lda     #$03
	jsr     _bgcolor
;
; j = y - 4;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     decax4
	ldx     #$00
	ldy     #$06
	sta     (sp),y
;
; oy = j;    
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
;
; for(;;) {
;
L002D:	jmp     L0030
L002F:	jmp     L002D
;
; key = read_joystick1();
;
L0030:	jsr     _read_joystick1
	ldy     #$02
	sta     (sp),y
;
; if(key & BUTTON_START) {
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$10
	stx     tmp1
	ora     tmp1
	jeq     L0033
;
; break;
;
	jmp     L002E
;
; clrscr();
;
L0033:	jsr     _clrscr
;
; for(k = 0; k < 4; k++) {
;
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
L0036:	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     #$04
	jsr     boolult
	jne     L0039
	jmp     L0037
;
; gotoxy(0, oy + k);
;
L0039:	lda     #$00
	jsr     pusha
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldx     #$00
	jsr     _gotoxy
;
; for(l = 0; l < x; l++) {
;
	ldx     #$00
	lda     #$00
	ldy     #$04
	sta     (sp),y
L0041:	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     tosultax
	jne     L0044
	jmp     L0038
;
; cputc(32);
;
L0044:	lda     #$20
	jsr     _cputc
;
; for(l = 0; l < x; l++) {
;
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$04
	sta     (sp),y
	pla
	jmp     L0041
;
; for(k = 0; k < 4; k++) {
;
L0038:	ldy     #$05
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$05
	sta     (sp),y
	pla
	jmp     L0036
;
; if(--j < 4) {
;
L0037:	ldy     #$06
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	cmp     #$04
	jsr     boolult
	jeq     L004B
;
; j = y - 4;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     decax4
	ldx     #$00
	ldy     #$06
	sta     (sp),y
;
; for(k = 0; k < 4; k++) {
;
L004B:	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
L004F:	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     #$04
	jsr     boolult
	jne     L0052
	jmp     L0050
;
; gotoxy(0, j + k);
;
L0052:	lda     #$00
	jsr     pusha
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldx     #$00
	jsr     _gotoxy
;
; cputs(s[k]);
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$21
	jsr     tosmulax
	clc
	adc     #$07
	bcc     L005D
	inx
	clc
L005D:	adc     sp
	tay
	txa
	adc     sp+1
	tax
	tya
	jsr     _cputs
;
; for(k = 0; k < 4; k++) {
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$05
	sta     (sp),y
	pla
	jmp     L004F
;
; delay(50);
;
L0050:	ldx     #$00
	lda     #$32
	jsr     _delay
;
; }
;
	jmp     L002F
;
; }
;
L002E:	ldy     #$8B
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ memefaec (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_memefaec: near

.segment	"CODE"

;
; for(i = 0; i < 14; i++) {
;
	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L007C:	ldy     #$01
	jsr     ldaxysp
	cmp     #$0E
	txa
	sbc     #$00
	bvc     L0083
	eor     #$80
L0083:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L007F
	jmp     L007D
;
; if(faec[i].x) {
;
L007F:	ldy     #$01
	jsr     ldaxysp
	jsr     aslax2
	clc
	adc     #<(_faec)
	tay
	txa
	adc     #>(_faec)
	tax
	tya
	ldy     #$00
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L007E
;
; gotoxy(faec[i].x,faec[i].y);
;
	ldy     #$01
	jsr     ldaxysp
	jsr     aslax2
	clc
	adc     #<(_faec)
	tay
	txa
	adc     #>(_faec)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	jsr     aslax2
	clc
	adc     #<(_faec)
	tay
	txa
	adc     #>(_faec)
	tax
	tya
	ldy     #$02
	jsr     ldauidx
	jsr     _gotoxy
;
; cprintf(":^)");
;
	lda     #<(L008E)
	ldx     #>(L008E)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; for(i = 0; i < 14; i++) {
;
L007E:	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L007C
;
; }
;
L007D:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; start:
;
	jsr     decsp7
;
; x = 14; y = 12; oldx = 0; oldy = 0;
;
L0092:	ldx     #$00
	lda     #$0E
	ldy     #$05
	sta     (sp),y
	ldx     #$00
	lda     #$0C
	ldy     #$04
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$02
	sta     (sp),y
;
; bgcolor(COLOR_BLACK);
;
	lda     #$00
	jsr     _bgcolor
;
; textcolor(COLOR_WHITE);
;
	lda     #$01
	jsr     _textcolor
;
; waitvblank();
;
	jsr     _waitvblank
;
; for(i = 0; i < sizeof(foo); i++) {
;
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L00A0:	ldy     #$01
	jsr     ldaxysp
	cpx     #$00
	bne     L00A8
	cmp     #$64
L00A8:	jsr     boolult
	jne     L00A3
	jmp     L00A1
;
; gotoxy(i, 0);
;
L00A3:	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$00
	jsr     _gotoxy
;
; cprintf("%u", foo[i]);
;
	lda     #<(L00AE)
	ldx     #>(L00AE)
	jsr     pushax
	lda     #<(_foo)
	ldx     #>(_foo)
	ldy     #$02
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
;
; for(i = 0; i < sizeof(foo); i++) {
;
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L00A0
;
; while(1);
;
L00A1:	jmp     L00B4
L00B4:	jmp     L00B4
;
; memefaec();
;
	jsr     _memefaec
;
; for(;;) {   
;
L00B7:	jmp     L00BA
L00B9:	jmp     L00B7
;
; key = read_joystick1();
;
L00BA:	jsr     _read_joystick1
	ldy     #$06
	sta     (sp),y
;
; if(key & BUTTON_UP)    y--;
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$08
	stx     tmp1
	ora     tmp1
	jeq     L00BD
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	pha
	sec
	sbc     #$01
	ldy     #$04
	sta     (sp),y
	pla
;
; if(key & BUTTON_DOWN)  y++;
;
L00BD:	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$04
	stx     tmp1
	ora     tmp1
	jeq     L00C0
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$04
	sta     (sp),y
	pla
;
; if(key & BUTTON_LEFT)  x--;
;
L00C0:	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
	jeq     L00C3
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	pha
	sec
	sbc     #$01
	ldy     #$05
	sta     (sp),y
	pla
;
; if(key & BUTTON_RIGHT) x++;
;
L00C3:	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	and     #$01
	stx     tmp1
	ora     tmp1
	jeq     L00C6
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$05
	sta     (sp),y
	pla
;
; if(y > 27) {
;
L00C6:	ldy     #$04
	ldx     #$00
	lda     (sp),y
	cmp     #$1C
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L00CF
;
; if(oldy < 26) y = 0;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	cmp     #$1A
	jsr     boolult
	jeq     L00CB
	ldx     #$00
	lda     #$00
	ldy     #$04
	sta     (sp),y
;
; else y = 27;
;
	jmp     L00CF
L00CB:	ldx     #$00
	lda     #$1B
	ldy     #$04
	sta     (sp),y
;
; if(x > 29) {
;
L00CF:	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     #$1E
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L00D8
;
; if(oldx < 28) x = 0;
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	cmp     #$1C
	jsr     boolult
	jeq     L00D4
	ldx     #$00
	lda     #$00
	ldy     #$05
	sta     (sp),y
;
; else x = 29;
;
	jmp     L00D8
L00D4:	ldx     #$00
	lda     #$1D
	ldy     #$05
	sta     (sp),y
;
; if(x != oldx || y != oldy) {   
;
L00D8:	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     tosneax
	jne     L00DC
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     tosneax
	jne     L00DC
	ldx     #$00
	lda     #$00
	jeq     L00DD
L00DC:	ldx     #$00
	lda     #$01
L00DD:	jeq     L00F4
;
; clrscr();
;
	jsr     _clrscr
;
; memefaec();
;
	jsr     _memefaec
;
; gotoxy(1,1);
;
	lda     #$01
	jsr     pusha
	lda     #$01
	jsr     _gotoxy
;
; cprintf("x=%u y=%u", x, y);   
;
	lda     #<(L00E4)
	ldx     #>(L00E4)
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$06
	jsr     _cprintf
;
; gotoxy(x,y);    
;
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     _gotoxy
;
; cprintf(":^)");   
;
	lda     #<(L00EC)
	ldx     #>(L00EC)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
;
; oldx = x;
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	ldy     #$03
	sta     (sp),y
;
; oldy = y;
;
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
;
; delay(10);
;
	ldx     #$00
	lda     #$0A
	jsr     _delay
;
; if(x == 20 && y == 21) {
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     #$14
	jsr     booleq
	jeq     L00F6
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	cmp     #$15
	jsr     booleq
	jne     L00F5
L00F6:	ldx     #$00
	lda     #$00
	jeq     L00F7
L00F5:	ldx     #$00
	lda     #$01
L00F7:	jeq     L00F4
;
; game_over();
;
	jsr     _game_over
;
; goto start;
;
	jmp     L0092
;
; }
;
L00F4:	jmp     L00B9
;
; }
;
	jsr     incsp7
	rts

.endproc

